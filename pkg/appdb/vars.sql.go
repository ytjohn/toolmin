// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: vars.sql

package appdb

import (
	"context"
)

const createVar = `-- name: CreateVar :one
INSERT INTO vars (
    key, value
) VALUES (?, ?)
RETURNING id, "key", value, created, updated
`

type CreateVarParams struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (q *Queries) CreateVar(ctx context.Context, arg CreateVarParams) (Var, error) {
	row := q.db.QueryRowContext(ctx, createVar, arg.Key, arg.Value)
	var i Var
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteVar = `-- name: DeleteVar :exec
DELETE FROM vars
WHERE key = ?
`

func (q *Queries) DeleteVar(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, deleteVar, key)
	return err
}

const getVar = `-- name: GetVar :one
SELECT id, "key", value, created, updated FROM vars
WHERE key = ? LIMIT 1
`

func (q *Queries) GetVar(ctx context.Context, key string) (Var, error) {
	row := q.db.QueryRowContext(ctx, getVar, key)
	var i Var
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listVars = `-- name: ListVars :many
SELECT id, "key", value, created, updated FROM vars
ORDER BY key
`

func (q *Queries) ListVars(ctx context.Context) ([]Var, error) {
	rows, err := q.db.QueryContext(ctx, listVars)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Var{}
	for rows.Next() {
		var i Var
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Value,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVar = `-- name: UpdateVar :one
UPDATE vars
SET value = ?,
    updated = CURRENT_TIMESTAMP
WHERE key = ?
RETURNING id, "key", value, created, updated
`

type UpdateVarParams struct {
	Value string `json:"value"`
	Key   string `json:"key"`
}

func (q *Queries) UpdateVar(ctx context.Context, arg UpdateVarParams) (Var, error) {
	row := q.db.QueryRowContext(ctx, updateVar, arg.Value, arg.Key)
	var i Var
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.Created,
		&i.Updated,
	)
	return i, err
}
