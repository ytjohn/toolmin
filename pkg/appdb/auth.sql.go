// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: auth.sql

package appdb

import (
	"context"
	"database/sql"
)

const createSigningKey = `-- name: CreateSigningKey :one
INSERT INTO signing_keys (key_data, expires_at, is_active) 
VALUES (?, datetime('now', '+5 days'), 1)
RETURNING id, key_data, created_at, updated_at, expires_at, is_active
`

func (q *Queries) CreateSigningKey(ctx context.Context, keyData string) (SigningKey, error) {
	row := q.db.QueryRowContext(ctx, createSigningKey, keyData)
	var i SigningKey
	err := row.Scan(
		&i.ID,
		&i.KeyData,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.IsActive,
	)
	return i, err
}

const deleteExpiredKeys = `-- name: DeleteExpiredKeys :exec
DELETE FROM signing_keys 
WHERE expires_at < datetime('now', ?1 || ' days')
`

func (q *Queries) DeleteExpiredKeys(ctx context.Context, days sql.NullString) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredKeys, days)
	return err
}

const getActiveSigningKey = `-- name: GetActiveSigningKey :one
SELECT id, key_data, created_at, updated_at, expires_at, is_active FROM signing_keys 
WHERE is_active = 1 
AND expires_at > CURRENT_TIMESTAMP 
ORDER BY expires_at DESC 
LIMIT 1
`

func (q *Queries) GetActiveSigningKey(ctx context.Context) (SigningKey, error) {
	row := q.db.QueryRowContext(ctx, getActiveSigningKey)
	var i SigningKey
	err := row.Scan(
		&i.ID,
		&i.KeyData,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.IsActive,
	)
	return i, err
}

const getAllValidSigningKeys = `-- name: GetAllValidSigningKeys :many
SELECT id, key_data, created_at, updated_at, expires_at, is_active FROM signing_keys 
WHERE is_active = 1 
AND expires_at > CURRENT_TIMESTAMP 
ORDER BY expires_at DESC
`

func (q *Queries) GetAllValidSigningKeys(ctx context.Context) ([]SigningKey, error) {
	rows, err := q.db.QueryContext(ctx, getAllValidSigningKeys)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SigningKey{}
	for rows.Next() {
		var i SigningKey
		if err := rows.Scan(
			&i.ID,
			&i.KeyData,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ExpiresAt,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markExpiredKeysInactive = `-- name: MarkExpiredKeysInactive :exec
UPDATE signing_keys 
SET is_active = 0,
    updated_at = CURRENT_TIMESTAMP
WHERE expires_at < CURRENT_TIMESTAMP 
AND is_active = 1
`

func (q *Queries) MarkExpiredKeysInactive(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, markExpiredKeysInactive)
	return err
}

const updateSigningKeyData = `-- name: UpdateSigningKeyData :exec
UPDATE signing_keys 
SET key_data = ?,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?
`

type UpdateSigningKeyDataParams struct {
	KeyData string `json:"key_data"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdateSigningKeyData(ctx context.Context, arg UpdateSigningKeyDataParams) error {
	_, err := q.db.ExecContext(ctx, updateSigningKeyData, arg.KeyData, arg.ID)
	return err
}
