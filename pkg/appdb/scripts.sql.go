// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: scripts.sql

package appdb

import (
	"context"
)

const createScript = `-- name: CreateScript :one
INSERT INTO scripts (
    name, content, access_level
) VALUES (?, ?, ?)
RETURNING id, name, content, access_level, created, updated
`

type CreateScriptParams struct {
	Name        string `json:"name"`
	Content     string `json:"content"`
	AccessLevel string `json:"access_level"`
}

func (q *Queries) CreateScript(ctx context.Context, arg CreateScriptParams) (Script, error) {
	row := q.db.QueryRowContext(ctx, createScript, arg.Name, arg.Content, arg.AccessLevel)
	var i Script
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Content,
		&i.AccessLevel,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteScript = `-- name: DeleteScript :exec
DELETE FROM scripts
WHERE name = ?
`

func (q *Queries) DeleteScript(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteScript, name)
	return err
}

const getScript = `-- name: GetScript :one
SELECT id, name, content, access_level, created, updated FROM scripts
WHERE name = ? LIMIT 1
`

func (q *Queries) GetScript(ctx context.Context, name string) (Script, error) {
	row := q.db.QueryRowContext(ctx, getScript, name)
	var i Script
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Content,
		&i.AccessLevel,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listScripts = `-- name: ListScripts :many
SELECT id, name, content, access_level, created, updated FROM scripts
ORDER BY name
`

func (q *Queries) ListScripts(ctx context.Context) ([]Script, error) {
	rows, err := q.db.QueryContext(ctx, listScripts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Script{}
	for rows.Next() {
		var i Script
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Content,
			&i.AccessLevel,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listScriptsByAccess = `-- name: ListScriptsByAccess :many
SELECT id, name, content, access_level, created, updated FROM scripts
WHERE access_level = ?
ORDER BY name
`

func (q *Queries) ListScriptsByAccess(ctx context.Context, accessLevel string) ([]Script, error) {
	rows, err := q.db.QueryContext(ctx, listScriptsByAccess, accessLevel)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Script{}
	for rows.Next() {
		var i Script
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Content,
			&i.AccessLevel,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateScript = `-- name: UpdateScript :one
UPDATE scripts
SET content = ?, 
    access_level = ?,
    updated = CURRENT_TIMESTAMP
WHERE name = ?
RETURNING id, name, content, access_level, created, updated
`

type UpdateScriptParams struct {
	Content     string `json:"content"`
	AccessLevel string `json:"access_level"`
	Name        string `json:"name"`
}

func (q *Queries) UpdateScript(ctx context.Context, arg UpdateScriptParams) (Script, error) {
	row := q.db.QueryRowContext(ctx, updateScript, arg.Content, arg.AccessLevel, arg.Name)
	var i Script
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Content,
		&i.AccessLevel,
		&i.Created,
		&i.Updated,
	)
	return i, err
}
