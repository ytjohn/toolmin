// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: secrets.sql

package appdb

import (
	"context"
)

const createSecret = `-- name: CreateSecret :one
INSERT INTO secrets (
    key, value
) VALUES (?, ?)
RETURNING id, "key", value, created, updated
`

type CreateSecretParams struct {
	Key   string `json:"key"`
	Value []byte `json:"value"`
}

func (q *Queries) CreateSecret(ctx context.Context, arg CreateSecretParams) (Secret, error) {
	row := q.db.QueryRowContext(ctx, createSecret, arg.Key, arg.Value)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const deleteSecret = `-- name: DeleteSecret :exec
DELETE FROM secrets
WHERE key = ?
`

func (q *Queries) DeleteSecret(ctx context.Context, key string) error {
	_, err := q.db.ExecContext(ctx, deleteSecret, key)
	return err
}

const getSecret = `-- name: GetSecret :one
SELECT id, "key", value, created, updated FROM secrets
WHERE key = ? LIMIT 1
`

func (q *Queries) GetSecret(ctx context.Context, key string) (Secret, error) {
	row := q.db.QueryRowContext(ctx, getSecret, key)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.Created,
		&i.Updated,
	)
	return i, err
}

const listSecrets = `-- name: ListSecrets :many
SELECT id, "key", value, created, updated FROM secrets
ORDER BY key
`

func (q *Queries) ListSecrets(ctx context.Context) ([]Secret, error) {
	rows, err := q.db.QueryContext(ctx, listSecrets)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Secret{}
	for rows.Next() {
		var i Secret
		if err := rows.Scan(
			&i.ID,
			&i.Key,
			&i.Value,
			&i.Created,
			&i.Updated,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSecret = `-- name: UpdateSecret :one
UPDATE secrets
SET value = ?,
    updated = CURRENT_TIMESTAMP
WHERE key = ?
RETURNING id, "key", value, created, updated
`

type UpdateSecretParams struct {
	Value []byte `json:"value"`
	Key   string `json:"key"`
}

func (q *Queries) UpdateSecret(ctx context.Context, arg UpdateSecretParams) (Secret, error) {
	row := q.db.QueryRowContext(ctx, updateSecret, arg.Value, arg.Key)
	var i Secret
	err := row.Scan(
		&i.ID,
		&i.Key,
		&i.Value,
		&i.Created,
		&i.Updated,
	)
	return i, err
}
